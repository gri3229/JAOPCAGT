plugins {
	id "com.crystaelix.loom" version "jitpack-af214fdb"
	id "eclipse"
	id "idea"
	id "maven-publish"
	id "net.kyori.blossom" version "[1,2)"
	id "me.modmuss50.mod-publish-plugin" version "0.5.0"
}

repositories {
	mavenCentral()
	flatDir {
		dirs "libs"
	}
	exclusiveContent {
		forRepository {
			maven {
				url = "https://maven.parchmentmc.net/"
			}
		}
		filter {
			includeGroup "org.parchmentmc.data"
		}
	}
	exclusiveContent {
		forRepository {
			maven {
				url = "https://maven.blamejared.com/"
			}
		}
		filter {
			includeGroup "mezz.jei"
		}
	}
	exclusiveContent {
		forRepository {
			maven {
				url = "https://maven.terraformersmc.com/releases/"
			}
		}
		filter {
			includeGroup "dev.emi"
		}
	}
	exclusiveContent {
		forRepository {
			maven {
				url = "https://maven.ithundxr.dev/snapshots/"
			}
		}
		filter {
			includeGroup "com.tterrag.registrate"
		}
	}
	exclusiveContent {
		forRepository {
			maven {
				url = "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/"
			}
		}
		filter {
			includeGroup "software.bernie.geckolib"
		}
	}
	exclusiveContent {
		forRepository {
			maven {
				url = "https://maven.firstdarkdev.xyz/snapshots/"
			}
		}
		filter {
			includeGroup "com.lowdragmc.ldlib"
			includeGroup "com.gregtechceu.gtceu"
		}
	}
	exclusiveContent {
		forRepository {
			maven {
				url = "https://dl.cloudsmith.io/public/tslat/sbl/maven/"
			}
		}
		filter {
			includeGroup "net.tslat.smartbrainlib"
		}
	}
	exclusiveContent {
		forRepository {
			maven {
				url = "https://dl.cloudsmith.io/public/klikli-dev/mods/maven/"
			}
		}
		filter {
			includeGroup "com.klikli_dev"
		}
	}
	exclusiveContent {
		forRepository {
			maven {
				url = "https://cursemaven.com/"
			}
		}
		filter {
			includeGroup "curse.maven"
		}
	}
}

sourceSets {
	main
}

def mcVersion = "1.21"
def modName = "JAOPCAGTCEu"
def modId = "jaopcagtceu"
def specVersion = "3"
def vendor = "thelm"

group = "thelm.jaopca.gtceu"
version = "3.0.a.0"

archivesBaseName = "${modName}-${mcVersion}"

java {
	toolchain.languageVersion = JavaLanguageVersion.of(21)
	withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = "UTF-8"
}

loom {
	silentMojangMappingsLicense()
	interfaceInjection.enableDependencyInterfaceInjection = false
	runs {
		configureEach {
			property "forge.logging.console.level", "debug"
		}
		client {
			vmArg "-Xmx7G"
		}
		server {
			vmArg "-Xmx3G"
		}
	}
}

dependencies {
	// Log4j
	implementation "org.apache.logging.log4j:log4j-core:2.22.1"

	// Minecraft
	minecraft "com.mojang:minecraft:1.21"
	mappings loom.layered {
		officialMojangMappings()
		parchment "org.parchmentmc.data:parchment-1.21:2024.07.07@zip"
	}
	neoForge "net.neoforged:neoforge:21.0.133-beta"

	// Dependencies
	implementation "curse.maven:jaopca-266936:5561137"
	implementation "com.tterrag.registrate:Registrate:MC1.21-1.3.0+45"
	implementation("com.lowdragmc.ldlib:ldlib-neoforge-1.21:1.0.26.a") {transitive = false}
	implementation "curse.maven:configuration-444699:5501280"
	implementation("com.gregtechceu.gtceu:gtceu-1.21:1.3.1:slim") {transitive = false}
	implementation "dev.emi:emi-neoforge:1.1.10+1.21"

	// Testing
	implementation("software.bernie.geckolib:geckolib-neoforge-1.21:4.5.7") {transitive = false}
	implementation "curse.maven:ato-405593:5553138"
	implementation "net.tslat.smartbrainlib:SmartBrainLib-neoforge-1.21:1.14.5"
	implementation("com.klikli_dev:modonomicon-1.21-neoforge:1.96.1") {transitive = false}
	implementation("com.klikli_dev:occultism-1.21-neoforge:1.139.1") {transitive = false}
	implementation("com.klikli_dev:theurgy-1.21-neoforge:1.30.1") {transitive = false}

	// Performance
	implementation "curse.maven:yeetusexperimentus-635427:5444189"
	implementation "curse.maven:modernfix-790626:5527238"
	implementation "curse.maven:ferritecore-429235:5434178"
}

def replacements = [
	"0@VERSION@": version
]

blossom {
	replaceToken(replacements)
}

processResources {
	inputs.properties(replacements)
	filesMatching(["mcmod.info", "META-INF/mods.toml", "META-INF/neoforge.mods.toml"]) {
		filter {
			it.replace(replacements)
		}
	}
}

def manifestAttributes = [
	"Specification-Title": modName,
	"Specification-Vendor": vendor,
	"Specification-Version": specVersion,
	"Implementation-Title": archivesBaseName,
	"Implementation-Version": version,
	"Implementation-Vendor": vendor,
]

jar {
	manifest.attributes(manifestAttributes)
}

sourcesJar {
	manifest.attributes(manifestAttributes)
}

publishMods {
	file = remapJar.archiveFile
	version = displayName = "GTCEu-${mcVersion}-${project.version}"
	changelog = file("changelog.md").text
	type = ALPHA
	modLoaders.add("neoforge")
	additionalFiles.from(remapSourcesJar.archiveFile)

	curseforge {
		accessToken = providers.gradleProperty("curseforge.token")
		projectId = "836168"
		minecraftVersions.add(mcVersion)
		requires "jaopca", "gregtechceu-modern"
	}

	modrinth {
		accessToken = providers.gradleProperty("modrinth.token")
		projectId = "DFWm1IQL"
		minecraftVersions.add(mcVersion)
		requires "jaopca", "gregtechceu-modern"
	}
}
